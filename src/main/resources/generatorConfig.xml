<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <properties resource="application.properties"/>

    <!-- targetRuntime="MyBatis3Simple":生成简单版的CRUD，不带example，使用通用mapper的example -->
    <!--  defaultModelType="hierarchical" blob字段用的模式
            flat    该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。一般使用这个模型就够了
    -->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!-- 通用mapper指定的 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 通用mapper插件 -->
        <plugin type="com.study.plugins.MapperPlugin">
<!--            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>-->
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.ids.SelectByIdsMapper"/>
            <property name="caseSensitive" value="true"/>
        </plugin>
        <!-- lombok -->
        <plugin type="com.study.plugins.LombokPlugin">
            <property name="hasLombok" value="true"/>
        </plugin>

        <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true" />
        </commentGenerator>

        <!-- jdbcConnection：指定如何连接到目标数据库 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true"
                        userId="${jdbc.username}" password="${jdbc.password}">
        </jdbcConnection>
        <!-- <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
            connectionURL="jdbc:oracle:thin:@192.168.10.1:1521:orcl"
            userId="ssm" password="ssm">
        </jdbcConnection> -->

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
           NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- javaModelGenerator：生成POJO类的位置,指定javaBean的生成策略 targetPackage="test.model"：目标包名
            targetProject="\MBGTestProject\src"：目标工程 -->
        <javaModelGenerator
                targetPackage="com.study.entity"
                targetProject=".\src\main\java">
        </javaModelGenerator>

        <!-- sqlMapGenerator：sql映射生成策略： -->
        <sqlMapGenerator targetPackage="com.study.mapper"
                         targetProject=".\src\main\resources">
        </sqlMapGenerator>

        <!-- javaClientGenerator:指定mapper接口所在的位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.study.mapper"
                             targetProject=".\src\main\java">
        </javaClientGenerator>

        <!-- 根据数据库表生成Java文件的相关规则，当表明和实体类名不同时，才会生成@Table注解 -->
        <!-- tableName="%"表示数据库中所有表都参与逆向工程，此时使用默认规则 -->
        <!-- 默认规则：table_dept→TableDept -->
        <!-- 不符合默认规则时需要使用tableName和domainObjectName两个属性明确指定 -->
<!--        <table tableName="%"/>-->
        <table tableName="TZ_ORG_BU"/>

<!--        <table tableName="TZ_CLASS"/>-->
    </context>
</generatorConfiguration>